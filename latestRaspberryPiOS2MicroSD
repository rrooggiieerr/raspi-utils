#!/bin/bash

RASPBIANHOST='downloads.raspberrypi.org'
#RASPBIANLATESTURL="https://$RASPBIANHOST/raspbian_lite_latest"
RASPBIANLATESTURL="https://$RASPBIANHOST/raspios_lite_armhf_latest"
echo $RASPBIANLATESTURL

# Check if this script supports the OS
if [ `uname` != 'Linux' ] && [ `uname` != 'Darwin' ]; then
	echo 'This script is written for Linux or OS X'
	exit 1
fi

if [ ! -z "$RASPBIANIMAGE" ] && [ ! -f "$RASPBIANIMAGE" ]; then
	echo 'Given image file does not exist'
	exit 1
fi

if [ ! -z "$RASPBIANIMAGEZIP" ] && [ ! -f "$RASPBIANIMAGEZIP" ]; then
	echo 'Given image zip file does not exist'
	exit 1
fi

if [ `uname` = 'Darwin' ] || [ "$CONTINUE" != 'true' ]; then
	echo 'Welcome! This script will download the latest version of Raspberry Pi OS Lite, configures WiFi and enables SSH so you can connect to it remotely'
	echo

	if [ -z "$RASPBIANIMAGE" ] && [ -z "$RASPBIANIMAGEZIP" ]; then
		#RASPBIANIMAGEZIP=`ls -tr *raspbian-*-lite.zip 2> /dev/null | tail -n 1`
		if host -t A "$RASPBIANHOST" > /dev/null; then
			echo 'Checking if downloaded Raspberry Pi OS Lite is the latest version...'
			# Check for latest Raspberry Pi OS Lite image in current dir
			#RASPBIANIMAGEZIPURL=`curl -4 -Is "$RASPBIANLATESTURL" | sed -n 's|^Location: \(.*\)$|\1|pI' | tr -d '\r'`
			RASPBIANIMAGEZIPURL=`curl -4 -Is "$RASPBIANLATESTURL" | sed -n 's|^[Ll]ocation: \(.*\)$|\1|p' | tr -d '\r'`
			if [ -z "$RASPBIANIMAGEZIPURL" ]; then
				echo 'Failed to retrieve latest Raspian URL.'
				exit 1
			fi

			RASPBIANIMAGEZIP=`echo "$RASPBIANIMAGEZIPURL" | sed "s|^.*/||"`
			if [ ! -f "$RASPBIANIMAGEZIP" ]; then
				# If not available download latest Raspberry Pi OS Lite
				echo 'Latest Raspberry Pi OS Lite is not yet downloaded, downloading...'
				echo "Downloading $RASPBIANIMAGEZIP"
				if ! curl -4 -L -O "$RASPBIANIMAGEZIPURL"; then
					echo 'Failed to download latest Raspberry Pi OS Lite.'
					exit 1
				fi
			elif ! unzip -t "$RASPBIANIMAGEZIP" > /dev/null 2>&1; then
				echo 'Latest Raspberry Pi OS Lite is not fully downloaded, resuming download...'
				if ! curl -4 -L -O -C - "$RASPBIANIMAGEZIPURL"; then
					echo 'Failed to download latest Raspberry Pi OS Lite.'
					exit 1
				fi
			else
				echo 'Latest Raspberry Pi OS Lite is already downloaded'
			fi
		fi
	fi

	#if [ -z "$RASPBIANIMAGE" ]; then
	#	RASPBIANIMAGE=`echo "$RASPBIANIMAGEZIP" | sed 's|\.zip$|.img|'`
	#	if [ ! -f "$RASPBIANIMAGE" ]; then
	#		if ! unzip "$RASPBIANIMAGEZIP" "$RASPBIANIMAGE"; then
	#			echo 'Failed to unzipping the Raspberry Pi OS Lite archive.'
	#			exit 1
	#		fi
	#	fi
	#	echo
	#fi

	if [ -z "$NOWIFI" ]; then
		if [ `uname` = 'Linux' ] && [ -x /sbin/wpa_cli ]; then
			SSID=`/sbin/wpa_cli status | sed -n 's|^ssid=\(.*\)$|\1|p'`
			read -e -p 'Your WiFi network name: ' -e -i "$SSID" 'SSID'
		else
			#SSID=`/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I | sed -n 's|^ *SSID: \(.*\)$|\1|p'`
			read -e -p 'Your WiFi network name: ' 'SSID'
		fi
		if [ `uname` = 'Linux' ] && [ -x /usr/bin/wpa_passphrase ]; then
			echo -e -n 'Your WiFi network password: '
			PSK=`wpa_passphrase "$SSID" | sed -n 's|^\tpsk=\([0-9a-f]*\)$|\1|p'`
		else
			read -e -p 'Your WiFi network password: ' 'PSK'
			PSK="\"$PSK\""
		fi
		echo
	fi

	if [ `uname` = 'Linux' ] && [ "$(id -u)" -ne 0 ]; then
		echo 'You should now run this installation script as root'
		if [ ! -z "$RASPBIANIMAGE" ]; then
			sudo SSID="$SSID" PSK="$PSK" RASPBIANIMAGE="$RASPBIANIMAGE" CONTINUE='true' "$0"
		elif [ ! -z "$RASPBIANIMAGEZIP" ]; then
			sudo SSID="$SSID" PSK="$PSK" RASPBIANIMAGEZIP="$RASPBIANIMAGEZIP" CONTINUE='true' "$0"
		fi
		exit
	fi
fi

[ `uname` = 'Linux' ] && SDCARD=`ls -tr /dev/sd* 2> /dev/null | grep "^/dev/sd[a-z]*$" | tail -n 1`
[ `uname` = 'Darwin' ] && SDCARD=`ls -tr /dev/disk* 2> /dev/null | grep "^/dev/disk[0-9]*$" | tail -n 1`
if [ ! -z "$SDCARD" ]; then
	echo
	echo "Your last inserted device is $SDCARD, please validate that this is your Micro SD card."
	echo 'Press D to detect an other device, any other key to overwrite your Micro SD card or CTRL-C to terminate the script'
	read -n 1 CHOICE
fi

# Detect Micro SD card
if [ -z "$SDCARD" ] || [ "$CHOICE" = 'd' ] || [ "$CHOICE" = 'D' ]; then
	echo
	echo 'Detecting Micro SD card, make sure the card is NOT attached to your system'
	read -n 1 -p 'Press any key to continue'
	[ `uname` = 'Linux' ] && DISKUTILLIST1=`ls -tr /dev/sd* 2> /dev/null | grep "^/dev/sd[a-z]*$"`
	#[ `uname` = 'Darwin' ] && DISKUTILLIST1=`diskutil list | grep '^/dev/'`
	[ `uname` = 'Darwin' ] && DISKUTILLIST1=`ls -tr /dev/disk* 2> /dev/null | grep "^/dev/disk[0-9]*$"`
	echo 'Now attach the Micro SD card to your system'
	read -n 1 -p 'Press any key to continue'
	# Wait a couple of seconds for the system
	sleep 2
	[ `uname` = 'Linux' ] && DISKUTILLIST2=`ls -tr /dev/sd* 2> /dev/null | grep "^/dev/sd[a-z]*$"`
	#[ `uname` = 'Darwin' ] && DISKUTILLIST2=`diskutil list | grep '^/dev/'`
	[ `uname` = 'Darwin' ] && DISKUTILLIST2=`ls -tr /dev/disk* 2> /dev/null | grep "^/dev/disk[0-9]*$"`

	SDCARD=`diff <(echo "$DISKUTILLIST1") <(echo "$DISKUTILLIST2") | grep '^> ' | sed 's|^> ||'`
	if [ -z "$SDCARD" ]; then
		echo 'No Micro SD card detected'
		exit 1
	fi

	# Maybe some other validations? Like how long the device has been atached, should be less than 10 seconds

	echo "Detected $SDCARD to be your Micro SD card, please validate."
	echo 'Press any key to overwrite your Micro SD card or CTRL-C to terminate the script'
	read
fi

# Use rdisk on OS X for improved performance
[ `uname` = 'Darwin' ] && SDCARD=`echo "$SDCARD" | sed 's|/dev/disk|/dev/rdisk|'`

# Unmount the Micro SD card
echo "Unmounting $SDCARD"
[ `uname` = 'Linux' ] && umount "$SDCARD"* 2> /dev/null
[ `uname` = 'Darwin' ] && diskutil unmountDisk "$SDCARD"

# Copy Raspberry Pi OS Lite to your Micro SD card
echo 'Copying Raspberry Pi OS Lite to your Micro SD card'
if [ `uname` = 'Linux' ]; then
	if [ ! -z "$RASPBIANIMAGE" ]; then
		dd bs=32M if="$RASPBIANIMAGE" of="$SDCARD" conv=sync
	elif [ ! -z "$RASPBIANIMAGEZIP" ]; then
		#unzip -p "$RASPBIANIMAGEZIP" | dd bs=32M of="$SDCARD" conv=sync
		unzip -p "$RASPBIANIMAGEZIP" > $SDCARD
	fi
elif [ `uname` = 'Darwin' ]; then
	if [ `id | grep "80(admin)" > /dev/null` ]; then
		unzip -p "$RASPBIANIMAGEZIP" | sudo dd bs=1m of="$SDCARD" conv=sync
	else
		if [ -z "$RASPBIANIMAGE" ]; then
			RASPBIANIMAGE=`echo "$RASPBIANIMAGEZIP" | sed 's|\.zip$|.img|'`
			if [ ! -f "$RASPBIANIMAGE" ]; then
				if ! unzip "$RASPBIANIMAGEZIP" "$RASPBIANIMAGE"; then
					echo 'Failed to unzipping the Raspberry Pi OS Lite archive.'
					exit 1
				fi
			fi
			echo
		fi

		echo 'You have to switch to an adminstrative user'
		read -p 'Admin user name: ' ADMINUSER
		#su $ADMINUSER -c "unzip -p \"$RASPBIANIMAGEZIP\" \"$RASPBIANIMAGE\" | sudo dd bs=1m of=\"$SDCARD\" conv=sync"
		su "$ADMINUSER" -c "sudo dd bs=1m if=\"$RASPBIANIMAGE\" of=\"$SDCARD\" conv=sync"
	fi
fi
sleep 2

if [ `uname` = 'Linux' ]; then
	MOUNTPOINT='/mnt/boot'
	mkdir -p "$MOUNTPOINT"
	mount "${SDCARD}1" "$MOUNTPOINT"
elif [ `uname` = 'Darwin' ]; then
	diskutil mount "${SDCARD}s1"
	MOUNTPOINT='/Volumes/boot'
fi

# Configure WIFI
if [ ! -z "$SSID" ]; then
	cat << EOF > "$MOUNTPOINT/wpa_supplicant.conf"
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
	ssid="$SSID"
	psk=$PSK
}
EOF
fi

# Enable SSH
touch "$MOUNTPOINT/ssh"

[ `uname` = 'Linux' ] &&
	umount "$MOUNTPOINT" &&
	rmdir "$MOUNTPOINT"
[ `uname` = 'Darwin' ] &&
	diskutil unmountDisk "$SDCARD" &&
	sleep 5 &&
	diskutil eject "$SDCARD"

echo 'Remove your Micro SD card, put it in your Raspberry Pi and boot. Have fun!'
